import botCore
import parserCore
import settings
from modules import misc, database
from aiogram import utils


async def broadcast(call):
    if misc.is_admin(call.chat.id):
        for user in database.User.select():
            try:
                text = f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:\n{call.text[4::]}"
                await botCore.send_message(chat_id=user.user_id, text=text,
                                           disable_notifications=user.silent_mode, reply_markup=None)
            except utils.exceptions.BotBlocked as e:
                print(f"User {user.user_id} was deleted. Cause: {e.text}")
                database.User.delete().where(database.User.user_id == user.user_id).execute()


async def get_user(call):
    if misc.is_admin(call["from"].id):
        if not call.text[6::] == "":
            user = database.User.select().where(database.User.user_id == call.text[6::]).get()
            try:
                chat_data = await botCore.bot.get_chat(chat_id=user.user_id)
                text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n" \
                       f"ID: {chat_data.id}; –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_data.username}\n" \
                       f"–ò–º—è: {chat_data.first_name}; –§–∞–º–∏–ª–∏—è: {chat_data.last_name}\n\n" \
                       f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞: \n" \
                       f"–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã: {user.observing_channels}\n" \
                       f"–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω: {user.silent_mode}\n\n" \
                       f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö, –ø–∏—à–∏ /channel"
                return text
            except utils.exceptions.BotBlocked as e:
                print(f"User {user.user_id} was deleted. Cause: {e.text}")
                database.User.delete().where(database.User.user_id == user.user_id).execute()
        else:
            users = database.User.select(database.User.user_id)
            userlist = ""
            for user in users:
                userlist += str(user.user_id) + "\n"
            return f"–°–ø–∏—Å–æ–∫ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n{userlist}"
    else:
        return "üßê –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


async def get_channel(call):
    if misc.is_admin(call["from"].id):
        chat_data = await parserCore.client.get_chat(chat_id=call.text[9::])
        text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n" \
               f"ID: {chat_data.id}; –ò–º—è –∫–∞–Ω–∞–ª–∞: {chat_data.username}\n" \
               f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {chat_data.title}\n\n"

        if chat_data.pinned_message is not None:
            text += f"–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat_data.pinned_message.text or chat_data.pinned_message.caption}\n" \
                    f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {str(chat_data.pinned_message.date)}"

        return text
    else:
        return "üßê –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


def banwords(call):
    if misc.is_admin(call.from_user.id):
        text = call.text[9::]
        if text == "":
            return f"–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—Ö —Å–ª–æ–≤: {settings.banlist}"
        elif "remove_word" in text:
            text = call.text[21::]
            return f"–°–ª–æ–≤–æ {text} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞!"
            settings.banlist.remove(text)
        else:
            return f"–°–ª–æ–≤–æ {text} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!"
            settings.banlist.append(text)
