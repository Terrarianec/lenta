from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import botCore
import parserCore
from modules import misc, database


async def remove(call):
    remove_kb = InlineKeyboardMarkup(resize_keyboard=True)

    for channel in database.get_observing_channels(call):
        if channel == "" or " " in channel:
            pass
        else:
            channel_info = await parserCore.get_chat_info_by_link(float(channel))
            remove_kb.add(InlineKeyboardButton(f"{channel_info.title}", callback_data=channel_info.id))

    remove_kb.add(InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel"))

    return remove_kb, '–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'


async def profile(call):
    profile_kb = InlineKeyboardMarkup(resize_keyboard=True)
    profile_kb.add(InlineKeyboardButton(f'–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å "—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º"', callback_data="profile_silent_mode"))
    profile_kb.add(InlineKeyboardButton(f'–°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è', callback_data="profile_wipe_data"))

    profile_header = await botCore.bot.send_message(call.from_user.id,
                                                    '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                                    '(–¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)',
                                                    reply_markup=profile_kb)
    result = ""
    channels = database.get_observing_channels(call)
    for channel in channels:
        if channel == "" or " " in channel:
            pass
        else:
            channel_info = await parserCore.get_chat_info_by_link(float(channel))
            result += f"{misc.generate_random_color()}" \
                      f"{channel_info.title}" \
                      f" <--> " \
                      f"{channel_info.members_count} " \
                      f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    user = database.check_user_exsistance(call).get()
    if user.is_pro:
        sub_limit = 30
    else:
        sub_limit = 7
    await profile_header.reply(f'–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ({str(len(channels))}/{sub_limit}): \n' + result)


def pro(call):
    user = database.check_user_exsistance(call).get()
    if user.is_pro:
        return None, f'–¢—ã —É–∂–µ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ —Å –Ω–∞–º–∏!\n–¢–≤–æ–π PRO-—Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫–∞–µ—Ç {user.pro_expires}'
    else:
        profile_kb = InlineKeyboardMarkup(resize_keyboard=True)
        profile_kb.add(InlineKeyboardButton(f'–°—Ç–∞—Ç—å PRO üòé', url="t.me/r2c_paymentBot"))

        return profile_kb, '–ù–µ –±—É–¥—å –Ω—É–±–ª–æ–º, –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π PRO\n' \
                           'C PRO-–ø–æ–¥–ø–∏—Å–∫–æ–π —É —Ç–µ–±—è –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–∞–∫\n' \
                           '‚úÖ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ 30 —á–∞—Ç–æ–≤ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ\n' \
                           '‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –Ω–æ –∏ –≥—Ä—É–ø–ø—ã\n' \
                           '‚úÖ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª—é—à–∫–∞–º –ø–µ—Ä–≤—ã–º'
